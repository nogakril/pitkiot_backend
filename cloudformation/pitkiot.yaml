AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Cloudformation template for resources needed for HUJI final project.

Parameters:
  PairName:
    Description: The name of the pair working on the exercise.
    Type: String
  CodePackageDate:
    Description: The date of the code package in ms.
    Type: String

Resources:

  # DynamoDB Pitkiot table
  PitkiotTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: huji-lightricks-pitkiot
      AttributeDefinitions:
        - AttributeName: game_id
          AttributeType: S
      KeySchema:
        - AttributeName: game_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Game Creator Lambda
  GameCreatorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: huji-lightricks-pitkiot-game-creator-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: huji-lightricks-pitkiot-game-creator-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt PitkiotTable.Arn

  GameCreatorLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huji-lightricks-pitkiot-game-creator-lambda
      Handler: lambdas.game_creator.handler
      Role: !GetAtt GameCreatorLambdaRole.Arn
      Timeout: 25
      CodeUri:
        Bucket:
          Fn::ImportValue: !Sub huji-lightricks-pitkiot-code-${PairName}-bucket-name
        Key: !Sub ${PairName}-${CodePackageDate}-code-package.zip
      Runtime: python3.8
      FunctionUrlConfig:
        AuthType: NONE

  GameCreatorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${GameCreatorLambdaFunction}
      RetentionInDays: 3

  # Player Adder Lambda
  PlayerAdderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: huji-lightricks-pitkiot-player-adder-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: huji-lightricks-pitkiot-player-adder-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt PitkiotTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt PitkiotTable.Arn

  PlayerAdderLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huji-lightricks-pitkiot-player-adder-lambda
      Handler: lambdas.player_adder.handler
      Role: !GetAtt PlayerAdderLambdaRole.Arn
      Timeout: 25
      CodeUri:
        Bucket:
          Fn::ImportValue: !Sub huji-lightricks-pitkiot-code-${PairName}-bucket-name
        Key: !Sub ${PairName}-${CodePackageDate}-code-package.zip
      Runtime: python3.8
      FunctionUrlConfig:
        AuthType: NONE

  PlayerAdderLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${PlayerAdderLambdaFunction}
      RetentionInDays: 3

  # Status Getter Lambda
  StatusGetterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: huji-lightricks-pitkiot-status-getter-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: huji-lightricks-pitkiot-status-getter-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt PitkiotTable.Arn

  StatusGetterLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huji-lightricks-pitkiot-status-getter-lambda
      Handler: lambdas.status_getter.handler
      Role: !GetAtt StatusGetterLambdaRole.Arn
      Timeout: 25
      CodeUri:
        Bucket:
          Fn::ImportValue: !Sub huji-lightricks-pitkiot-code-${PairName}-bucket-name
        Key: !Sub ${PairName}-${CodePackageDate}-code-package.zip
      Runtime: python3.8
      FunctionUrlConfig:
        AuthType: NONE

  StatusGetterLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${StatusGetterLambdaFunction}
      RetentionInDays: 3

  # Status Setter Lambda
  StatusSetterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: huji-lightricks-pitkiot-status-setter-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: huji-lightricks-pitkiot-status-setter-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt PitkiotTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt PitkiotTable.Arn

  StatusSetterLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huji-lightricks-pitkiot-status-setter-lambda
      Handler: lambdas.status_setter.handler
      Role: !GetAtt StatusSetterLambdaRole.Arn
      Timeout: 25
      CodeUri:
        Bucket:
          Fn::ImportValue: !Sub huji-lightricks-pitkiot-code-${PairName}-bucket-name
        Key: !Sub ${PairName}-${CodePackageDate}-code-package.zip
      Runtime: python3.8
      FunctionUrlConfig:
        AuthType: NONE

  StatusSetterLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${StatusSetterLambdaFunction}
      RetentionInDays: 3

  # Players Getter Lambda
  PlayersGetterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: huji-lightricks-pitkiot-players-getter-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: huji-lightricks-pitkiot-players-getter-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt PitkiotTable.Arn

  PlayersGetterLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huji-lightricks-pitkiot-players-getter-lambda
      Handler: lambdas.players_getter.handler
      Role: !GetAtt PlayersGetterLambdaRole.Arn
      Timeout: 25
      CodeUri:
        Bucket:
          Fn::ImportValue: !Sub huji-lightricks-pitkiot-code-${PairName}-bucket-name
        Key: !Sub ${PairName}-${CodePackageDate}-code-package.zip
      Runtime: python3.8
      FunctionUrlConfig:
        AuthType: NONE

  PlayersGetterLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${PlayersGetterLambdaFunction}
      RetentionInDays: 3

  # Word Adder Lambda
  WordAdderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: huji-lightricks-pitkiot-word-adder-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: huji-lightricks-pitkiot-word-adder-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt PitkiotTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt PitkiotTable.Arn

  WordAdderLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huji-lightricks-pitkiot-word-adder-lambda
      Handler: lambdas.word_adder.handler
      Role: !GetAtt WordAdderLambdaRole.Arn
      Timeout: 25
      CodeUri:
        Bucket:
          Fn::ImportValue: !Sub huji-lightricks-pitkiot-code-${PairName}-bucket-name
        Key: !Sub ${PairName}-${CodePackageDate}-code-package.zip
      Runtime: python3.8
      FunctionUrlConfig:
        AuthType: NONE

  WordAdderLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${WordAdderLambdaFunction}
      RetentionInDays: 3

  # Words Getter lambda
  WordsGetterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: huji-lightricks-pitkiot-words-getter-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: huji-lightricks-pitkiot-words-getter-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt PitkiotTable.Arn

  WordsGetterLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: huji-lightricks-pitkiot-words-getter-lambda
      Handler: lambdas.words_getter.handler
      Role: !GetAtt WordsGetterLambdaRole.Arn
      Timeout: 25
      CodeUri:
        Bucket:
          Fn::ImportValue: !Sub huji-lightricks-pitkiot-code-${PairName}-bucket-name
        Key: !Sub ${PairName}-${CodePackageDate}-code-package.zip
      Runtime: python3.8
      FunctionUrlConfig:
        AuthType: NONE

  WordsGetterLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${WordsGetterLambdaFunction}
      RetentionInDays: 3

Outputs:
  GameCreatorLambdaURL:
    Description: The URL of the game creator lambda
    Value:
      Fn::GetAtt: GameCreatorLambdaFunctionUrl.FunctionUrl
    Export:
      Name: huji-lightricks-pitkiot-game-creator-lambda-url

  PlayerAdderLambdaURL:
    Description: The URL of the player adder lambda
    Value:
      Fn::GetAtt: PlayerAdderLambdaFunctionUrl.FunctionUrl
    Export:
      Name: huji-lightricks-pitkiot-player-adder-lambda-url

  StatusSetterLambdaURL:
    Description: The URL of the status setter lambda
    Value:
      Fn::GetAtt: StatusSetterLambdaFunctionUrl.FunctionUrl
    Export:
      Name: huji-lightricks-pitkiot-status-setter-lambda-url

  StatusGetterLambdaURL:
    Description: The URL of the status getter lambda
    Value:
      Fn::GetAtt: StatusGetterLambdaFunctionUrl.FunctionUrl
    Export:
      Name: huji-lightricks-pitkiot-status-getter-lambda-url

  PlayersGetterLambdaURL:
    Description: The URL of the players getter lambda
    Value:
      Fn::GetAtt: PlayersGetterLambdaFunctionUrl.FunctionUrl
    Export:
      Name: huji-lightricks-pitkiot-players-getter-lambda-url

  WordAdderLambdaURL:
    Description: The URL of the word adder lambda
    Value:
      Fn::GetAtt: WordAdderLambdaFunctionUrl.FunctionUrl
    Export:
      Name: huji-lightricks-pitkiot-word-adder-lambda-url

  WordsGetterLambdaURL:
    Description: The URL of the words getter lambda
    Value:
      Fn::GetAtt: WordsGetterLambdaFunctionUrl.FunctionUrl
    Export:
      Name: huji-lightricks-pitkiot-words-getter-lambda-url
